{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Piwigo Container Service for Podman","text":""},{"location":"#pre-requisites","title":"Pre-Requisites","text":"<p>NOTE: This is tested and verified to work if the same versions listed below are used, otherwise, things may not be exactly the same!</p> <ol> <li>AlmaLinux OS == 9.3 </li> <li>Latest version of Podman installed</li> <li>The latest version of podman-compose installed (docker-compose)</li> <li>The latest podman-plugins installed</li> <li>SELinux is Enabled (We do not disable it just because its tricky, its an important security feature!)</li> </ol>"},{"location":"#requirements","title":"Requirements","text":"<ol> <li>A user to the AlmaLinux server with sudo permissions to run the install script</li> </ol>"},{"location":"#process","title":"Process","text":"<p>Pull the install script from your AlmaLinux Host (the script must be run in sudo mode!) in your current working directory:</p> <pre><code>curl https://github.com/mattbuske/piwigo-container-service/blob/main/setup/install.sh &gt; ./install.sh\n# Do we need to update the script to be executable? - Test this\nsudo ./install.sh\n</code></pre> <p>The Script will:</p> <ol> <li>Check for necessary pre-requisites<ol> <li>If not installed/configured to minimum, exit.</li> </ol> </li> <li>Look for the expected file structure<ol> <li>If it does not exist, create it</li> </ol> </li> <li>Look for the expected users, and if they do not exist, create them</li> <li>Checks for the installation of git (required) and installs if it does not exist</li> <li>Look for the expected git repository<ol> <li>If it does not exist, clone it</li> </ol> </li> <li>Pull updates from the git repository</li> <li></li> </ol>"},{"location":"#development","title":"Development","text":""},{"location":"#documentation","title":"Documentation","text":"<p>To run and build the documentation for this project, Python and Pip are required. Then setup a virtual python environment and serve the docs from inside the project directory like so:</p> <pre><code># Windows Powershell\n## Create the python virtual environment\npy -m venv .venv\n## Activate the python virtual environment\n.venv/Scripts/Activate.ps1\n## Install documentation requirements\npy -m pip install -r requirements.txt\n## Serve the documentation\npy -m mkdocs serve\n</code></pre> <p>Then visit http://127.0.0.8:8000 to view your documentation in real time. Updating the documents in the <code>docs/</code> folder or the <code>mkdocs.yml</code> file will automatically rebuild and display the documentation in the browser for you.</p>"}]}